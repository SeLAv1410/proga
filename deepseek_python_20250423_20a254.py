import json
import logging
import os
from datetime import datetime
from typing import Dict, Optional

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
REGISTER, CREATE_TICKET = range(2)
ADMIN_ACTIONS = 1

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    os.makedirs('data', exist_ok=True)
    db_files = {
        'users': 'data/users.json',
        'tickets': 'data/tickets.json',
        'admins': 'data/admins.json'
    }
    
    for file in db_files.values():
        if not os.path.exists(file):
            with open(file, 'w') as f:
                json.dump([], f)
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    admins_file = db_files['admins']
    with open(admins_file, 'r+') as f:
        admins = json.load(f)
        if not admins:
            admins.append({
                'user_id': 'ADMIN_CHAT_ID',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id
                'username': 'admin',
                'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            })
            f.seek(0)
            json.dump(admins, f, indent=4)

def load_db(file_name):
    with open(f'data/{file_name}.json', 'r') as f:
        return json.load(f)

def save_db(data, file_name):
    with open(f'data/{file_name}.json', 'w') as f:
        json.dump(data, f, indent=4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu(user_is_admin=False):
    buttons = [
        ["üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"],
        ["üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏"]
    ]
    if user_is_admin:
        buttons.append(["üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def admin_menu():
    buttons = [
        ["üìä –í—Å–µ –∑–∞—è–≤–∫–∏"],
        ["üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏"],
        ["‚úÖ –ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏"],
        ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def ticket_actions(ticket_id):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîÑ –í —Ä–∞–±–æ—Ç—É", callback_data=f"process_{ticket_id}"),
            InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_{ticket_id}")
        ],
        [
            InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{ticket_id}")
        ]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    users = load_db('users')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admins = load_db('admins')
    is_admin = any(admin['user_id'] == user_id for admin in admins)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_exists = any(u['user_id'] == user_id for u in users)
    
    if user_exists:
        await update.message.reply_text(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu(is_admin)
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "üìù –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
            reply_markup=ReplyKeyboardRemove()
        )
        return REGISTER

async def register_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['fio'] = update.message.text
    await update.message.reply_text("üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞:")
    return REGISTER

async def register_cabinet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['cabinet'] = update.message.text
    await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return REGISTER

async def register_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    user = update.effective_user
    users = load_db('users')
    
    new_user = {
        'user_id': str(user.id),
        'username': user.username,
        'fio': context.user_data['fio'],
        'cabinet': context.user_data['cabinet'],
        'phone': phone,
        'registered_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    users.append(new_user)
    save_db(users, 'users')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admins = load_db('admins')
    is_admin = any(admin['user_id'] == str(user.id) for admin in admins)
    
    await update.message.reply_text(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üë§ –§–ò–û: {new_user['fio']}\n"
        f"üè¢ –ö–∞–±–∏–Ω–µ—Ç: {new_user['cabinet']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {new_user['phone']}",
        reply_markup=main_menu(is_admin)
    )
    
    context.user_data.clear()
    return ConversationHandler.END

async def create_ticket_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:",
        reply_markup=ReplyKeyboardRemove()
    )
    return CREATE_TICKET

async def create_ticket_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_db('users')
    user = next((u for u in users if u['user_id'] == user_id), None)
    
    if not user:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=main_menu()
        )
        return ConversationHandler.END
    
    problem = update.message.text
    tickets = load_db('tickets')
    ticket_id = len(tickets) + 1
    
    new_ticket = {
        'id': ticket_id,
        'user_id': user_id,
        'fio': user['fio'],
        'cabinet': user['cabinet'],
        'phone': user['phone'],
        'problem': problem,
        'status': '–æ—Ç–∫—Ä—ã—Ç–∞',
        'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'updated_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    tickets.append(new_ticket)
    save_db(tickets, 'tickets')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admins = load_db('admins')
    for admin in admins:
        try:
            await context.bot.send_message(
                chat_id=admin['user_id'],
                text=f"üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{ticket_id}\n\n"
                     f"üë§ {user['fio']}\n"
                     f"üè¢ –ö–∞–±–∏–Ω–µ—Ç: {user['cabinet']}\n"
                     f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n\n"
                     f"üìù –ü—Ä–æ–±–ª–µ–º–∞:\n{problem}",
                reply_markup=ticket_actions(ticket_id)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    
    await update.message.reply_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_id} —Å–æ–∑–¥–∞–Ω–∞!\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.",
        reply_markup=main_menu(any(admin['user_id'] == user_id for admin in admins))
    )
    return ConversationHandler.END

async def show_user_tickets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    tickets = load_db('tickets')
    user_tickets = [t for t in tickets if t['user_id'] == user_id]
    
    if not user_tickets:
        await update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.",
            reply_markup=main_menu()
        )
        return
    
    for ticket in user_tickets:
        status_icon = "üü¢" if ticket['status'] == '–æ—Ç–∫—Ä—ã—Ç–∞' else "üü°" if ticket['status'] == '–≤ —Ä–∞–±–æ—Ç–µ' else "üî¥"
        await update.message.reply_text(
            f"{status_icon} –ó–∞—è–≤–∫–∞ #{ticket['id']}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {ticket['status']}\n"
            f"üìÖ –î–∞—Ç–∞: {ticket['created_at']}\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{ticket['problem']}",
            reply_markup=main_menu()
        )

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    admins = load_db('admins')
    
    if any(admin['user_id'] == user_id for admin in admins):
        await update.message.reply_text(
            "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=admin_menu()
        )
    else:
        await update.message.reply_text(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!",
            reply_markup=main_menu()
        )

async def show_all_tickets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tickets = load_db('tickets')
    
    if not tickets:
        await update.message.reply_text(
            "üì≠ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.",
            reply_markup=admin_menu()
        )
        return
    
    for ticket in tickets:
        status_icon = "üü¢" if ticket['status'] == '–æ—Ç–∫—Ä—ã—Ç–∞' else "üü°" if ticket['status'] == '–≤ —Ä–∞–±–æ—Ç–µ' else "üî¥"
        await update.message.reply_text(
            f"{status_icon} –ó–∞—è–≤–∫–∞ #{ticket['id']}\n"
            f"üë§ {ticket['fio']}\n"
            f"üè¢ –ö–∞–±–∏–Ω–µ—Ç: {ticket['cabinet']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {ticket['phone']}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {ticket['status']}\n"
            f"üìÖ –î–∞—Ç–∞: {ticket['created_at']}\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{ticket['problem']}",
            reply_markup=ticket_actions(ticket['id'])
        )

async def process_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    ticket_id = int(query.data.split('_')[1])
    tickets = load_db('tickets')
    
    for ticket in tickets:
        if ticket['id'] == ticket_id:
            ticket['status'] = '–≤ —Ä–∞–±–æ—Ç–µ'
            ticket['updated_at'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            break
    
    save_db(tickets, 'tickets')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=ticket['user_id'],
            text=f"‚ÑπÔ∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É.\n"
                 "–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    await query.edit_message_text(
        f"üîÑ –ó–∞—è–≤–∫–∞ #{ticket_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É.",
        reply_markup=ticket_actions(ticket_id)
    )

async def close_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    ticket_id = int(query.data.split('_')[1])
    tickets = load_db('tickets')
    
    for ticket in tickets:
        if ticket['id'] == ticket_id:
            ticket['status'] = '–∑–∞–∫—Ä—ã—Ç–∞'
            ticket['updated_at'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            break
    
    save_db(tickets, 'tickets')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=ticket['user_id'],
            text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} –∑–∞–∫—Ä—ã—Ç–∞.\n"
                 "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    await query.edit_message_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_id} –∑–∞–∫—Ä—ã—Ç–∞.",
        reply_markup=ticket_actions(ticket_id)
    )

async def reply_to_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    ticket_id = int(query.data.split('_')[1])
    context.user_data['replying_to'] = ticket_id
    await query.edit_message_text(
        f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ #{ticket_id}:"
    )
    return ADMIN_ACTIONS

async def send_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ticket_id = context.user_data['replying_to']
    message = update.message.text
    tickets = load_db('tickets')
    
    ticket = next((t for t in tickets if t['id'] == ticket_id), None)
    if not ticket:
        await update.message.reply_text(
            "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
            reply_markup=admin_menu()
        )
        return ConversationHandler.END
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            chat_id=ticket['user_id'],
            text=f"üì© –û—Ç–≤–µ—Ç –ø–æ –∑–∞—è–≤–∫–µ #{ticket_id}:\n\n{message}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    await update.message.reply_text(
        f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ –∑–∞—è–≤–∫–µ #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
        reply_markup=admin_menu()
    )
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=main_menu()
    )
    context.user_data.clear()
    return ConversationHandler.END

def main():
    # –°–æ–∑–¥–∞–µ–º Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token("7456113956:AAGD429WTSTlZz_rKRwH8eevxKRXbsq5G3Y").build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    reg_conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            REGISTER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, register_user),
                MessageHandler(filters.TEXT & ~filters.COMMAND, register_cabinet),
                MessageHandler(filters.TEXT & ~filters.COMMAND, register_phone)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    ticket_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É$'), create_ticket_start)],
        states={
            CREATE_TICKET: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_ticket_finish)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É
    reply_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(reply_to_ticket, pattern='^reply_')],
        states={
            ADMIN_ACTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, send_reply)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(reg_conv)
    application.add_handler(ticket_conv)
    application.add_handler(reply_conv)
    
    # –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    application.add_handler(MessageHandler(filters.Regex('^üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏$'), show_user_tickets))
    
    # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application.add_handler(MessageHandler(filters.Regex('^üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å$'), admin_panel))
    application.add_handler(MessageHandler(filters.Regex('^üìä –í—Å–µ –∑–∞—è–≤–∫–∏$'), show_all_tickets))
    application.add_handler(MessageHandler(filters.Regex('^üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$'), start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(process_ticket, pattern='^process_'))
    application.add_handler(CallbackQueryHandler(close_ticket, pattern='^close_'))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()